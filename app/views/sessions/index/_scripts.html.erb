<script>

var sessions = "<%= @sessions_json %>";

sessions = JSON.parse(sessions.replace(/&quot;/g,'"'));

var sessions_data  = new Array();
var create_at  = new Array();

const passed = "rgba(48, 255, 51, 0.3)";
const failed = "rgba(255, 60, 0, 0.3)";
const border_passed = "white";
const border_failed = "white";

for (x in sessions) {
    sessions_data.push(sessions[x]);
    create_at.push(sessions[x]['created_at'].slice(0,10));
}

var create_at = removeRepeatedItem(create_at);
var duration_time_unsort = getDataForDatasets(sessions_data, create_at, 'duration');


datasets_objects2 = [];
for (let i = 0; i < sessions_data.length; i++) {
  datasets_objects2.push(
    {
      label: ' ' + sessions_data[i]['summary_status']  + ' Duration',
      data: duration_time_unsort[i],
      borderWidth: 1,
      borderColor: 'white',
      backgroundColor: 'rgba(92, 168, 77, 0.5)',
      stack: 1
    }
  );
}

var datasets_objects = [];
for (let i = 0; i < sessions_data.length; i++) {  
  datasets_objects.push(
    {
      label: ' Duration',
      data: duration_time_unsort[i],
      borderWidth: 1,
      borderColor: 'green',
      backgroundColor: '#C0FFC1',
    }
  );
}

let config = {
  type: 'bar',
  data: {
    labels: create_at,
    datasets: datasets_objects,
  },
  options: {
    legend: {
      display: false,
      position: 'bottom'
    },
    tooltips: {
      mode: 'point',
      intersect: false
    },
    scales: {
      xAxes: [{
        stacked: true,
      }],
      yAxes: [{
        stacked: true,
        gridLines: {
          zeroLineWidth: 2,
          zeroLineColor: 'green',
        }
      }]
    },
    responsive: true,
    onClick: function(e, d) {
      if (d.length > 0) {
        var norm_or_abnorm = failes(sessions_data, create_at)
        var day =  create_at[`${d[0]._index}`];
        var norm_or_abnorm = norm_or_abnorm[`${d[0]._index}`];
        norm_or_abnorm = ( norm_or_abnorm == undefined )  ? 'Normal' : norm_or_abnorm
        alert( day + ' ' + norm_or_abnorm);
      }
    }
  },
};


let config2 = {
  type: 'horizontalBar',
  data: {
    labels: create_at,
    datasets: datasets_objects2 
  },
  responsive: true,
  options: {
    legend: {
      display: false,
      position: 'bottom'
    },
    tooltips: {
      enabled: false,
    },
    animation: {
      duration: 300,
      onProgress: function () {
        var chartInstance = this.chart,
        ctx = chartInstance.ctx;
        ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';
        ctx.lineWidth = 12;

        ctx.tooltipFontSize = 124;

        this.data.datasets.forEach(function (dataset, i) {
            var meta = chartInstance.controller.getDatasetMeta(i);
            meta.data.forEach(function (bar, index) {
                var data = dataset.data[index]; 
                ctx.fillText(data, bar._model.x - 10, bar._model.y - 2);
            });
        });   
      }
    },

    zeroLineWidth: 15,
    scales: {
      xAxes: [{
        stacked: true,
        gridLines: {
          zeroLineWidth: 3,
          zeroLineColor: 'gray',
        }
      }],
      yAxes: [{
        stacked: true,
        gridLines: {
          display: false
        },
      }]
    }
  }
};


let ctx = document.getElementById("chartPassingFailing").getContext("2d");
new Chart(ctx, config)


let ctx2 = document.getElementById("durrationVsTime").getContext("2d");
new Chart(ctx2, config2)

</script>