<script>

var sessions = "<%= @sessions_json %>";

sessions = JSON.parse(sessions.replace(/&quot;/g,'"'));

var sessions_data  = new Array();
var create_at  = new Array();

for (x in sessions) {
    sessions_data.push(sessions[x]);
    create_at.push(sessions[x]['created_at'].slice(0,10));
}

create_at = removeRepeatedItem(create_at);

const passed = "rgba(48, 255, 51, 0.3)";
const failed = "rgba(255, 60, 0, 0.3)";
const border_passed = "white";
const border_failed = "white";
var stack = new Array();

var datasets_objects = [];

for (let i = 0; i < sessions_data.length; i++) {
  datasets_objects.push(
    {
      label: 'id - ' + sessions_data[i]['created_at']
        .replace(/T/g, ' ')
        .replace(/.000Z/g, ' ') + ' Duration',
      data: [sessions_data[i].duration],
      borderWidth: 2,
      borderColor:
        sessions_data[i].summary_status == 'passed' ? border_passed : border_failed,
      backgroundColor: window["colorTag"](sessions_data[i].summary_status),
      stack: create_at.indexOf(sessions_data[i]['created_at'].slice(0,10)),
    }
  );
}
let config = {
  type: 'bar',
  data: {
    labels: sessions_data.length > 0 ? ['Sessions - ' + abnormal(sessions_data)] : ['Please choose a CSV file'],
    datasets: datasets_objects
  },
  
  options: {
    "hover": {
      "animationDuration": 0
    },
    plugins: [{
      beforeInit: function(chart, options) {
          alert(sadd);
      }
    }],
    animation: {
      duration: 1200,
      onProgress: function () {
        var chartInstance = this.chart,
        ctx = chartInstance.ctx;
        ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';
        ctx.lineWidth = 12;

        ctx.tooltipFontSize = 124;

        this.data.datasets.forEach(function (dataset, i) {
            var meta = chartInstance.controller.getDatasetMeta(i);
            meta.data.forEach(function (bar, index) {
                var data = dataset.data[index];                            
                ctx.fillText(data, bar._model.x, bar._model.y + 10);
            });
        });   
      }
    },
    legend: {
      display: false,
      position: 'bottom'
    },
    tooltips: {
      bodySpacing: 66,
      intersect: true,
      bodyFontColor: '#fff',
      backgroundColor: '#666',
      titleMarginTop: 20,
      yPadding: 50,
      xPadding: 50,
      footer: ['sd']
    },
    scales: {
      xAxes: [{
        stacked: true,
        barPercentage: 1,
        ticks: {
          beginAtZero:true
            // display: false //this will remove only the label
        }
      }],
      yAxes: [{ 
        stacked: true, 
        barPercentage: 1,
        ticks: {mirror: true}
       }]
    },
    title: {
      display: true,
      text: 'Sessions history ( green - passed, pink - failed, red - error, brown - stopped )' 
    },
    responsive: true,
    maintainAspectRatio: false
  },
};

let ctx = document.getElementById("myChart").getContext("2d");
new Chart(ctx, config)

</script>