<script>

var sessions = "<%= @sessions_json %>";

sessions = JSON.parse(sessions.replace(/&quot;/g,'"'));

var sessions_data  = new Array();
var create_at  = new Array();
var create_at_with_time  = new Array();
var duration  = new Array();

for (x in sessions) {
    sessions_data.push(sessions[x]);
    create_at.push(sessions[x]['created_at'].slice(0,10));
    time = sessions[x]['created_at'].replace(/T/g, ' ').replace(/.000Z/g, ' ');
    create_at_with_time.push(time);
    duration.push(sessions[x]['duration']);        
}

var create_at = removeRepeatedItem(create_at);

var passed = get_fields(sessions_data, create_at, 'passed');
var failed = get_fields(sessions_data, create_at, 'failed');
var error = get_fields(sessions_data, create_at, 'error');
var stopped = get_fields(sessions_data, create_at, 'stopped');

passed = createData(passed, create_at.length);
failed = createData(failed, create_at.length);
error = createData(error, create_at.length);
stopped = createData(stopped, create_at.length);


let config = {
  type: 'bar',
  data: {
    labels: create_at,
    datasets: [{
      label: 'Passed',
      backgroundColor: 'rgba(90, 172, 86, .5)',
      data: passed
    }, {
      label: 'Failed',
      backgroundColor: 'rgba(192, 167, 148, .5)',
      data: failed
    }, {
      label: 'Error',
      backgroundColor: 'rgba(237, 7, 34, .7)',
      data: error
    }, {
      label: 'Stopped',
      backgroundColor: 'rgba(114, 68, 156, .5)',
      data: stopped
    }]
  },
  options: {
    legend: {
      display: true,
      position: 'top'
    },
    tooltips: {
      mode: 'point',
      intersect: false
    },
    scales: {
      xAxes: [{
        stacked: true,
      }],
      yAxes: [{
        stacked: true,
        gridLines: {
          zeroLineColor: 'black',
        }
      }]
    },
    responsive: true,
    onClick: function(e, d) {
      if (d.length > 0) {
        var norm_or_abnorm = failes(sessions_data, create_at)
        var day =  create_at[`${d[0]._index}`];
        var norm_or_abnorm = norm_or_abnorm[`${d[0]._index}`];
        norm_or_abnorm = ( norm_or_abnorm == undefined )  ? 'Normal' : norm_or_abnorm
        alert(`${day} ( ${norm_or_abnorm} )`);
        var fail = document.getElementById('failes')
        fail.innerHTML = `${day} ( ${norm_or_abnorm} )`;
        fail.style.color =  norm_or_abnorm == 'Normal' ? 'green' : '' ; 
      }
    }
  },
};


let config2 = {
  type: 'line',
  data: {
    labels: create_at_with_time,
    datasets: [{
      label: 'Duration: ',
      data: duration,
      borderWidth: 1,
      borderColor: 'black',
      fill: false,
      stack: 1
    }] 
  },
  responsive: true,
  options: {
    legend: {
      display: false,
      position: 'bottom'
    },
    tooltips: {
      backgroundColor: 'green'
    },
    scales: {
      xAxes: [{
        gridLines: {
          zeroLineWidth: 2,
          zeroLineColor: 'gray',
        }
      }],
      yAxes: [{
        gridLines: {
          zeroLineWidth: 3,
        },
      }]
    }
  }
};


let ctx = document.getElementById('chartPassingFailing').getContext('2d');
new Chart(ctx, config)


let ctx2 = document.getElementById('durrationVsTime').getContext('2d');
new Chart(ctx2, config2)

</script>